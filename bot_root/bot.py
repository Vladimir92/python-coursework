#!/usr/bin/env python
# -*- coding: utf-8 -*-

import logging
import os
import urllib.parse

from bot_models import Novelty, User, Scale, Interest, UserInterests, NoveltyInterests, InternalError, psql_db
from peewee import PostgresqlDatabase
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, ConversationHandler, CallbackQueryHandler, MessageHandler, Filters

# Enable logging
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO)
logger = logging.getLogger(__name__)
YEARLY_COSTS, YEARLY_SALARY, DIRECT_SUBORDINATES, PEOPLE_RESPONSIBLE, MANAGED_CAPITAL, SUBSCRIBERS, \
BOOKS_SOLD, AUDIENCE, PRODUCT_USERS = range(9)

BOT_NAME = "YourNetworkBot"

vk_url = "https://vk.com/share.php?"
sharing_url_vk = {
    "url": "",
}
fb_url = "https://www.facebook.com/sharer/sharer.php?"
sharing_url_fb = {
    "u": "",
}


def start(bot, update):
    user = update.message.from_user
    logger.info("Report command of %s: %s", user.first_name, update.message.text)
    # Parsing out the referral UUID
    ref_id = None
    if len(update.message.text.split(" ")) > 1:
        ref_id = update.message.text.split(" ")[1]
    # Registering the user if its new one
    # logger.info("Starting user register with ref_id = {}".format(ref_id))
    get_or_register_user(user, ref_id)
    update.message.reply_text(
        '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {}!\n–Ø –±–æ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–π —á—Ç–æ–±—ã –ø–æ–º–æ–≥–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º –ª—é–¥—è–º –Ω–∞—Ö–æ–¥–∏—Ç—å –¥—Ä—É–≥–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –ª—é–¥–µ–π. '
        '–ß—Ç–æ–±—ã —è –º–æ–≥ —Ç–µ–±–µ –ø–æ–º–æ—á—å –∏—Å–∫–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –ª—é–¥–µ–π, –º–Ω–µ –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å —Ç–≤–æ–π –º–∞—Å—à—Ç–∞–± –ª–∏—á–Ω–æ—Å—Ç–∏.'
        '\n–ú–∞—Å—à—Ç–∞–± –ª–∏—á–Ω–æ—Å—Ç–∏ - —ç—Ç–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å —Ç–≤–æ–µ–≥–æ –≤–ª–∏—è–Ω–∏—è –Ω–∞ –¥—Ä—É–≥–∏—Ö –ª—é–¥–µ–π/–æ–±—â–µ—Å—Ç–≤–æ/—Å—Ç—Ä–∞–Ω—É –≤ —Ü–µ–ª–æ–º\n\n'
            .format(user.first_name if user.first_name else user.username))
    # Sending the message with Scale calculation button
    # For now skipping the users with calculated scale
    create_menu_message(bot, update)


def get_or_register_user(user, ref_id=None):
    ref_user = None
    if ref_id:
        query = User.select().where(User.unique_id == ref_id)
        if query.exists():
            ref_user = query.get()
    # logger.info("In register user, ref_id is {} and user found is {}".format(ref_id, ref_user))

    # Register in DB if not exist, putting the referrer id if provided
    if not User.select().where(User.tlg_id == user.id).exists():
        # logger.info("Putting ref_user id {} to user {}".format(ref_user, user.first_name))
        user_object = User.create(tlg_id=user.id,
                                  tlg_username=user.username,
                                  first_name=user.first_name,
                                  last_name=user.last_name,
                                  referer=ref_user)
    else:
        user_object = User.select().where(User.tlg_id == user.id).get()
    return user_object


# Parameter is Telegram user from Update
def get_user_scale(user):
    if not Scale.select().join(User).where(User.tlg_id == user.id).exists():
        user = get_or_register_user(user)
        scale = Scale.create(user=user, amount=0)
    else:
        scale = Scale.select().join(User).where(User.tlg_id == user.id).get()
    return scale


# Function displays initial message in scale-calculation dialogue
def scale_initial(bot, update):
    query = update.callback_query
    query.edit_message_text("–ù–∞—á–∏–Ω–∞–µ–º –ø–æ–¥—Å—á–µ—Ç –º–∞—Å—à—Ç–∞–±–∞ –≤–∞—à–µ–π –ª–∏—á–Ω–æ—Å—Ç–∏.\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å, –Ω–∞–∂–º–∏—Ç–µ /interrupt\n")
    query.message.reply_text("–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–∏ –∑–∞—Ç—Ä–∞—Ç—ã –≤ –≥–æ–¥ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –≤ —Ä—É–±–ª—è—Ö).\n"
                             "–°–∫–æ–ª—å–∫–æ –ª–∏—á–Ω—ã—Ö –¥–µ–Ω–µ–≥ –≤—ã —Ç—Ä–∞—Ç–∏—Ç–µ –∑–∞ –≥–æ–¥. –ó–¥–µ—Å—å –ø–∏—à–µ—Ç—Å—è —Å—É–º–º–∞ –≤—Å–µ—Ö –≤–∞—à–∏—Ö –õ–ò–ß–ù–´–• —Ä–∞—Å—Ö–æ–¥–æ–≤. "
                             "–†–∞—Å—Ö–æ–¥—ã –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞ –∑–¥–µ—Å—å –Ω–µ —É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è.")
    return YEARLY_COSTS


def interrupt(bot, update):
    user = update.message.from_user
    logger.info("User %s canceled the conversation.", user.first_name)
    update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
    create_menu_message(bot, update)
    return ConversationHandler.END


# Method appends to provided TelegramKeyboard the Social buttons from constants
def appendSocialButtons(keyboard, url):
    sharing_url_fb["u"] = url
    keyboard.append(
        [InlineKeyboardButton("–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≤ Facebook üîó", url=fb_url + urllib.parse.urlencode(sharing_url_fb))])

    sharing_url_vk["url"] = url
    keyboard.append(
        [InlineKeyboardButton("–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≤ VK üîó", url=vk_url + urllib.parse.urlencode(sharing_url_vk))])

    return keyboard


# Function displays main bot working MENU
# 1st is Scale and interests
# 2nd is Referral system
def create_menu_message(bot, update, is_callback=False):
    if is_callback:
        user = update.from_user
    else:
        user = update.message.from_user
    user_object = get_or_register_user(user)
    keyboard = []
    # Check, if the user have not calculate scale - display only one option
    if get_user_scale(user).amount <= 0:
        keyboard.append([InlineKeyboardButton("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –º–∞—Å—à—Ç–∞–± –ª–∏—á–Ω–æ—Å—Ç–∏", callback_data="scale_processing_start")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        message = "–•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –Ω–∞ —Å–∫–æ–ª—å–∫–æ —Ç—ã –º–∞—Å—à—Ç–∞–±–Ω–∞—è –ª–∏—á–Ω–æ—Å—Ç—å –∏ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–∞–º—ã–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º –¥–ª—è —Ç–µ–±—è " \
                  "—Å–æ–±—ã—Ç–∏—è–º? "
        update.message.reply_text(message, reply_markup=reply_markup)
        return
    # Adding the ability to recalculate scale at any time
    query = Scale.select().join(User).where(User.tlg_id == user.id)
    message = "{}, –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ –Ω–µ—Ç–≤–æ—Ä–∫–∏–Ω–≥ —Å–µ—Ç–∏:\n" \
              "–ú–∞—Å—à—Ç–∞–± –≤–∞—à–µ–π –ª–∏—á–Ω–æ—Å—Ç–∏: {}\n".format(user.first_name if user.first_name else user.username,
                                                    query.get().amount)
    keyboard.append([InlineKeyboardButton("–ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –º–∞—Å—à—Ç–∞–± –ª–∏—á–Ω–æ—Å—Ç–∏", callback_data="scale_processing_start")])
    # Referral system data to message append
    Referrer = User.alias()
    query = User.select().join(Referrer, on=(Referrer.referer == User.id)).where(User.tlg_id == user.id)
    ref_link = "https://t.me/{bot_name}?start={lnk}".format(bot_name=BOT_NAME, lnk=user_object.unique_id)
    message = "{}\n–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ —á–µ–ª–æ–≤–µ–∫ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ: {}" \
              "\n–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {}\n".format(message, query.count(), ref_link)

    # If the user does not have selected interests, show him the invitation to fill them
    if Interest.select().join(UserInterests).join(User).where(User.tlg_id == user.id).count() < 1:
        message = "{}\n–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–∏–±–æ–ª–µ–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –¥–ª—è –≤–∞—Å –Ω–æ–≤–æ—Å—Ç–∏, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã".format(message)
        keyboard.append([InlineKeyboardButton("–£–∫–∞–∑–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—ã", callback_data="interests_set")])
        keyboard = appendSocialButtons(keyboard, ref_link)
        reply_markup = InlineKeyboardMarkup(keyboard)
        update.message.reply_text(message, reply_markup=reply_markup)
        return
    query = User.select().join(UserInterests).join(Interest).where(User.tlg_id == user.id)
    message = "{}\n–£–∫–∞–∑–∞–Ω–æ {} –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π".format(message, query.count())
    keyboard.append([InlineKeyboardButton("–£—Ç–æ—á–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—ã", callback_data="interests_set")])
    keyboard = appendSocialButtons(keyboard, ref_link)
    # Final reply
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text(message, reply_markup=reply_markup)


# Function puts all possible interests to callback buttons and return them to user
def interests_show(bot, update):
    query = update.callback_query
    user = query.from_user
    keyboard = []
    for interest in Interest.select():
        if User.select().join(UserInterests).join(Interest).where(User.tlg_id == user.id,
                                                                  Interest.name == interest.name).exists():
            prefix = "‚úÖ "
        else:
            prefix = ""
        keyboard.append([InlineKeyboardButton(prefix + interest.name, callback_data="interest_{}".format(interest.id))])
    keyboard.append([InlineKeyboardButton("–ì–æ—Ç–æ–≤–æ", callback_data="interests_finish")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.edit_message_text("–û—Ç–º–µ—Ç—å—Ç–µ –≤–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã.\n–î–ª—è –∑–∞–≤–µ—Ä–µ—à–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ \"–ì–æ—Ç–æ–≤–æ\"", reply_markup=reply_markup)


def interests_process(bot, update):
    query = update.callback_query
    interest_id = query.data.split("_")[1]
    user_object = get_or_register_user(query.from_user)
    user = query.from_user
    target_interest = Interest.get(id=interest_id)
    keyboard = []

    if not User.select().join(UserInterests).join(Interest).where(User.tlg_id == user.id,
                                                                  Interest.name == target_interest.name).exists():
        UserInterests.create(user=user_object, interest=target_interest)
    else:
        ui = UserInterests.get(UserInterests.user == user_object, UserInterests.interest == target_interest)
        ui.delete_instance()

    for interest in Interest.select():
        if User.select().join(UserInterests).join(Interest).where(User.tlg_id == user.id,
                                                                  Interest.name == interest.name).exists():
            prefix = "‚úÖ "
        else:
            prefix = ""
        keyboard.append([InlineKeyboardButton(prefix + interest.name, callback_data="interest_{}".format(interest.id))])
    keyboard.append([InlineKeyboardButton("–ì–æ—Ç–æ–≤–æ", callback_data="interests_finish")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.edit_message_reply_markup(reply_markup=reply_markup)
    query.answer("–ò–Ω—Ç–µ—Ä–µ—Å –æ–±–Ω–æ–≤–ª–µ–Ω ‚úÖ")


def interests_finish(bot, update):
    query = update.callback_query
    query.edit_message_text("–í—ã–±–æ—Ä –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω")
    query.answer("–ù–æ–≤—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã –∑–∞–¥–∞–Ω—ã ‚úÖ")
    create_menu_message(bot, query, is_callback=True)


# Error handlers also receive the raised TelegramError object in error.
def error(bot, update, error):
    """Log Errors caused by Updates."""
    logger.error('Update "%s" caused error "%s"', update, error)


# Process the entered yearly costs and display the
def process_cost_and_ask_salary(bot, update):
    text = update.message.text
    user = update.message.from_user
    try:
        amount = int(text)
        scale = get_user_scale(user)
        scale.yearly_costs = amount
        # Resetting the scale for safe purposes
        scale.amount = 0
        scale.save()
        update.message.reply_text("–°–∫–æ–ª—å–∫–æ –∑/–ø –ø–ª–∞—Ç–∏—Ç–µ –∑–∞ –≥–æ–¥ (–¢–æ–ª—å–∫–æ –¥–ª—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤ –±–∏–∑–Ω–µ—Å–∞, —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –≤ "
                                  "—Ä—É–±–ª—è—Ö).\n"
                                  "–°—É–º–º–∞—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ä–∞–±–æ—Ç–Ω—ã—Ö –ø–ª–∞—Ç, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –≤—ã–ø–ª–∞—Ç–∏–ª–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 12 –º–µ—Å—è—Ü–µ–≤.")
        return YEARLY_SALARY
    except ValueError:
        update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–µ–∑ –±—É–∫–≤ –∏ –∑–Ω–∞–∫–æ–≤.")
        return YEARLY_COSTS


def process_salary_and_ask_subordinates(bot, update):
    text = update.message.text
    user = update.message.from_user
    try:
        amount = int(text)
        scale = get_user_scale(user)
        scale.salary_per_year = amount
        scale.save()
        update.message.reply_text("–°–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫ —É –≤–∞—Å –≤ –ø—Ä—è–º–æ–º –ø–æ–¥—á–∏–Ω–µ–Ω–∏–∏?"
                                  "\n–ó–¥–µ—Å—å —É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –≤ –ø—Ä—è–º–æ–º –ø–æ–¥—á–∏–Ω–µ–Ω–∏–∏. –°–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∏ –±–∏–∑–Ω–µ—Å–∞ –≤ "
                                  "—ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ —É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–µ –≤—Å–µ—Ö —Å–≤–æ–∏—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤, –∞ —Ç–æ–ª—å–∫–æ —Ç–µ—Ö, "
                                  "—Å –∫–µ–º –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É—é—Ç")
        return DIRECT_SUBORDINATES
    except ValueError:
        update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–µ–∑ –±—É–∫–≤ –∏ –∑–Ω–∞–∫–æ–≤.")
        return YEARLY_SALARY


def process_subordinates_and_ask_people_inresponsiblity(bot, update):
    text = update.message.text
    user = update.message.from_user
    try:
        amount = int(text)
        scale = get_user_scale(user)
        scale.direct_subordinates = amount
        scale.save()
        update.message.reply_text("–°–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫ —É –≤–∞—Å –≤ –∑–æ–Ω–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏?"
                                  "\n–ï—Å–ª–∏ –≤–∞—à–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–≤—è–∑–∞–Ω–∞ —Å –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ–º –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥—Ä—É–≥–∏—Ö –ª—é–¥–µ–π ("
                                  "–Ω–∞–ø—Ä–∏–º–µ—Ä: —É—á–∏—Ç–µ–ª—è, —á–∏–Ω–æ–≤–Ω–∏–∫–∏, –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É—é—â–∏–µ –æ—Ä–≥–∞–Ω—ã –∏ –¥—Ä), —É–∫–∞–∑—ã–≤–∞–µ—Ç–µ —Å–∫–æ–ª—å–∫–æ "
                                  "–≤—Å–µ–≥–æ —á–µ–ª–æ–≤–µ–∫ –≤ –∑–æ–Ω–µ –≤–∞—à–µ–≥–æ –≤–ª–∏—è–Ω–∏—è/–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏")
        return PEOPLE_RESPONSIBLE
    except ValueError:
        update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–µ–∑ –±—É–∫–≤ –∏ –∑–Ω–∞–∫–æ–≤.")
        return DIRECT_SUBORDINATES


def process_peopleinresponse_and_ask_managed_sums(bot, update):
    text = update.message.text
    user = update.message.from_user
    try:
        amount = int(text)
        scale = get_user_scale(user)
        scale.people_under_responsibility = amount
        scale.save()
        update.message.reply_text("–ö–∞–∫–∏–º–∏ —Å—É–º–º–∞–º–∏ –≤—ã —É–ø—Ä–∞–≤–ª—è–µ—Ç–µ?"
                                  "\n–ï—Å–ª–∏ –≤–∞—à–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–≤—è–∑–∞–Ω–∞ —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —á—É–∂–∏–º–∏ –∞–∫—Ç–∏–≤–∞–º–∏, —Ç–æ –≤ —ç—Ç–æ–π –≥—Ä–∞—Ñ–µ "
                                  "—É–∫–∞–∑—ã–≤–∞–µ—Ç–µ —Å—É–º–º—É –∑–∞ –≥–æ–¥, –∫–æ—Ç–æ—Ä—É—é —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç–µ. –õ–∏—á–Ω—ã–µ —Ç—Ä–∞—Ç—ã –∏ —Ç—Ä–∞—Ç—ã –≤–∞—à–µ–≥–æ "
                                  "–±–∏–∑–Ω–µ—Å–∞ —Ç—É—Ç –Ω–µ —É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è")
        return MANAGED_CAPITAL
    except ValueError:
        update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–µ–∑ –±—É–∫–≤ –∏ –∑–Ω–∞–∫–æ–≤.")
        return PEOPLE_RESPONSIBLE


def process_sums_and_ask_subscribers(bot, update):
    text = update.message.text
    user = update.message.from_user
    try:
        amount = int(text)
        scale = get_user_scale(user)
        scale.managed_capital = amount
        scale.save()
        update.message.reply_text("–°–∫–æ–ª—å–∫–æ —É –≤–∞—Å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö?"
                                  "\n–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º–∞—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤, –ø–æ –≤—Å–µ–º —Å–æ—Ü–∏–∞–ª—å–Ω—ã–º —Å–µ—Ç—è–º")
        return SUBSCRIBERS
    except ValueError:
        update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–µ–∑ –±—É–∫–≤ –∏ –∑–Ω–∞–∫–æ–≤.")
        return MANAGED_CAPITAL


def process_subscribers_and_ask_books_sold(bot, update):
    text = update.message.text
    user = update.message.from_user
    try:
        amount = int(text)
        scale = get_user_scale(user)
        scale.subscribers = amount
        scale.save()
        update.message.reply_text("–°–∫–æ–ª—å–∫–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –≤–∞—à–∏—Ö –∫–Ω–∏–≥ –ø—Ä–æ–¥–∞–Ω–æ?"
                                  "\n–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 12 –º–µ—Å—è—Ü–µ–≤")
        return BOOKS_SOLD
    except ValueError:
        update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–µ–∑ –±—É–∫–≤ –∏ –∑–Ω–∞–∫–æ–≤.")
        return SUBSCRIBERS


def process_books_and_ask_audience(bot, update):
    text = update.message.text
    user = update.message.from_user
    try:
        amount = int(text)
        scale = get_user_scale(user)
        scale.books_sold = amount
        scale.save()
        update.message.reply_text("–°—É–º–º–∞—Ä–Ω–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –ø—É–±–ª–∏—á–Ω—ã—Ö –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–π –∑–∞ –≥–æ–¥?"
                                  "\n–°—á–∏—Ç–∞–µ—Ç—Å—è –≤—Å—è –∞—É–¥–∏—Ç–æ—Ä–∏—è, –∫–∞–∫ –∂–∏–≤—ã—Ö –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–π, —Ç–∞–∫ –∏ –≤–µ–±–∏–Ω–∞—Ä–æ–≤")
        return AUDIENCE
    except ValueError:
        update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–µ–∑ –±—É–∫–≤ –∏ –∑–Ω–∞–∫–æ–≤.")
        return BOOKS_SOLD


def process_audience_and_ask_products(bot, update):
    text = update.message.text
    user = update.message.from_user
    try:
        amount = int(text)
        scale = get_user_scale(user)
        scale.public_speeches_audience = amount
        scale.save()
        update.message.reply_text("–°–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫ –ø–æ–ª—å–∑—É—é—Ç—Å—è –í–∞—à–∏–º —Ç–æ–≤–∞—Ä–æ–º –∏–ª–∏ —É—Å–ª—É–≥–æ–π?"
                                  "\n–í–æ–ø—Ä–æ—Å —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤ –±–∏–∑–Ω–µ—Å–∞. –ï—Å–ª–∏ –±–∏–∑–Ω–µ—Å —Ç–æ–≤–∞—Ä–Ω—ã–π, "
                                  "—Ç–æ –∑–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–≤–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ. –ï—Å–ª–∏ –±–∏–∑–Ω–µ—Å –ø—Ä–æ–¥–∞–µ—Ç —É—Å–ª—É–≥—É, "
                                  "—Ç–æ —Å—á–∏—Ç–∞—é—Ç—Å—è –≤—Å–µ –∫–ª–∏–µ–Ω—Ç—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 12 –º–µ—Å—è—Ü–µ–≤."
                                  "\n–ï—Å–ª–∏ –≤—ã –Ω–µ –≤–ª–∞–¥–µ–µ—Ç–µ –±–∏–∑–Ω–µ—Å–æ–º, –ø–æ—Å—Ç–∞–≤—å—Ç–µ 0")
        return PRODUCT_USERS
    except ValueError:
        update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–µ–∑ –±—É–∫–≤ –∏ –∑–Ω–∞–∫–æ–≤.")
        return AUDIENCE


def process_products_and_finalize(bot, update):
    text = update.message.text
    user = update.message.from_user
    try:
        amount = int(text)
        scale = get_user_scale(user)
        scale.product_or_service_users = amount
        # Random var, while we do not have formula
        scale.amount = scale_calc(scale)
        scale.save()
        update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤—Ä–µ–º—è —É—á–∞—Å—Ç–∏–µ. –ú–∞—Å—à—Ç–∞–± –≤–∞—à–µ–π –ª–∏—á–Ω–æ—Å—Ç–∏: {}".format(scale.amount))
        create_menu_message(bot, update)
        return ConversationHandler.END
    except ValueError:
        update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–µ–∑ –±—É–∫–≤ –∏ –∑–Ω–∞–∫–æ–≤.")
        return PRODUCT_USERS


# Function calculates
def scale_calc(scale):
    amount_scale = scale.yearly_costs + (scale.salary_per_year / 2) + (scale.direct_subordinates * 12000)
    amount_scale += (scale.people_under_responsibility * 40) + (scale.managed_capital * 0.05) + \
                    (scale.subscribers * 400)
    amount_scale += (scale.books_sold * 1200) + (scale.public_speeches_audience * 1200) + \
                    (scale.product_or_service_users * 40)
    amount_scale /= 10000
    return round(amount_scale)


def main():
    try:
        psql_db.connect()
    except InternalError as px:
        print(str(px))
    # Create the EventHandler and pass it your bot's token.
    token = os.environ.get('BOT_TOKEN')
    # REQUEST_KWARGS={
    #     'proxy_url': 'http://my-proxy:8080/',
    # }
    try:
        # Add request_kwargs=REQUEST_KWARGS to Updater invoke to set proxy params
        updater = Updater(token)
    except ValueError as err:
        print("Bot token error!", err, ". Exiting now...")
        exit(1)

    # Get the dispatcher to register handlers
    dp = updater.dispatcher

    # Log all errors
    dp.add_error_handler(error)

    # Adding event handlers
    dp.add_handler(CommandHandler("start", start))
    # Handler for scale calculation dialogue
    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(scale_initial, pattern="^scale_processing_start$")],
        states={
            YEARLY_COSTS: [MessageHandler(Filters.text, process_cost_and_ask_salary)],
            YEARLY_SALARY: [MessageHandler(Filters.text, process_salary_and_ask_subordinates)],
            DIRECT_SUBORDINATES: [MessageHandler(Filters.text, process_subordinates_and_ask_people_inresponsiblity)],
            PEOPLE_RESPONSIBLE: [MessageHandler(Filters.text, process_peopleinresponse_and_ask_managed_sums)],
            MANAGED_CAPITAL: [MessageHandler(Filters.text, process_sums_and_ask_subscribers)],
            SUBSCRIBERS: [MessageHandler(Filters.text, process_subscribers_and_ask_books_sold)],
            BOOKS_SOLD: [MessageHandler(Filters.text, process_books_and_ask_audience)],
            AUDIENCE: [MessageHandler(Filters.text, process_audience_and_ask_products)],
            PRODUCT_USERS: [MessageHandler(Filters.text, process_products_and_finalize)]
        },
        fallbacks=[CommandHandler('interrupt', interrupt)],
        allow_reentry=True
    )
    dp.add_handler(conv_handler)
    dp.add_handler(CallbackQueryHandler(interests_show, pattern="^interests_set$"))
    dp.add_handler(CallbackQueryHandler(interests_process, pattern="^interest_\d{1,4}$"))
    dp.add_handler(CallbackQueryHandler(interests_finish, pattern="^interests_finish$"))

    updater.start_polling()
    updater.idle()


if __name__ == "__main__":
    main()

